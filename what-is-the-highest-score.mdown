老师想知道从某某同学当中，分数最高的是多少，现在请你编程模拟老师的询问。当然，老师有时候需要更新某位同学的成绩. 
输入描述:
输入包括多组测试数据。
每组输入第一行是两个正整数N和M（0 < N <= 30000,0 < M < 5000）,分别代表学生的数目和操作的数目。
学生ID编号从1编到N。
第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩
接下来又M行，每一行有一个字符C（只取‘Q’或‘U’），和两个正整数A,B,当C为'Q'的时候, 表示这是一条询问操作，他询问ID从A到B（包括A,B）的学生当中，成绩最高的是多少
当C为‘U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。


输出描述:
对于每一次询问操作，在一行里面输出最高成绩.

输入例子:
5 7
1 2 3 4 5
Q 1 5
U 3 6
Q 3 4
Q 4 5
U 4 5
U 2 9
Q 1 5

输出例子:
5
6
5
9
```java
import java.util.Scanner;
public class Main{
	public static int max(int[] arr,int start,int end){
		if (start>end) {
			int temp=start;
			start=end;
			end=temp;
		}
		int max=arr[start];
		for (int i=start+1;i<=end;i++) {
			if (arr[i]>max) {
				max=arr[i];
			}
		}
		return max;
	}

	public static int[] getScores(String secondLine){
		String[] scoresStr=secondLine.split(" ");
		int[] res=new int[scoresStr.length];
		for (int i=0;i<scoresStr.length;i++ ) {
			res[i]=Integer.parseInt(scoresStr[i]);
		}
		return res;
	}

	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		//输入需要一直阻塞，反复输入
		while(sc.hasNext()){
			//学生数目为N 操作的数目M
			int N=sc.nextInt();
			int M=sc.nextInt();

			//学生的成绩数组
			int[] scores=new int[N];
			for (int i=0;i<N;++i) {
				int score=sc.nextInt();
				scores[i]=score;
			}
			/*for (int i=0;i<N;i++) {
				System.out.println(scores[i]);
			}*/

			int op=M;
			while(op>0){
				String operation=sc.next();
				int s=sc.nextInt();
				int e=sc.nextInt();

				if (operation.equals("Q")) {
					int temp=max(scores,s-1,e-1);
					System.out.println(temp);
					//每次找到后都立即输出
				}else if (operation.equals("U")) {
					scores[s-1]=e;
				}
				op--;
			}
		}
	}
}
```